// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package rsqlc

import (
	"context"
	"database/sql"
)

type Querier interface {
	//AddCartItem
	//
	//  INSERT INTO cart_item ("session_id", "product_id", "quantity", "created_at", "modified_at")
	//  VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	//  ON CONFLICT ("session_id", "product_id") DO UPDATE
	//  SET quantity = CASE WHEN cart_item.quantity < 10 THEN cart_item.quantity + EXCLUDED.quantity
	//      ELSE 10
	//  END,
	//  "modified_at" = CURRENT_TIMESTAMP
	//  RETURNING cart_item.quantity
	AddCartItem(ctx context.Context, arg AddCartItemParams) (int32, error)
	// Clear the user's cart
	//
	//  WITH order_creation AS (
	//      -- Create a new order for the user
	//      INSERT INTO public."order_details" ("user_id", "total", "created_at")
	//      SELECT ss."user_id", SUM(p."price" * ci."quantity"), CURRENT_TIMESTAMP
	//      FROM public."shopping_session" ss
	//      JOIN public."cart_item" ci ON ci."session_id" = ss."id"
	//      JOIN public."product" p ON ci."product_id" = p."id"
	//      WHERE ss."user_id" = $1
	//      GROUP BY ss."user_id"
	//      RETURNING "id"
	//  ),
	//  order_items AS (
	//      -- Insert items from cart into order_items using the created order_id
	//      INSERT INTO public."order_items" ("order_id", "product_id", "created_at")
	//      SELECT oc."id", ci."product_id", CURRENT_TIMESTAMP
	//      FROM public."cart_item" ci
	//      JOIN public."shopping_session" ss ON ci."session_id" = ss."id"
	//      JOIN order_creation oc ON true
	//      WHERE ss."user_id" = $1
	//  )
	//  DELETE FROM public."cart_item"
	//  WHERE "session_id" = (SELECT "id" FROM public."shopping_session" WHERE "user_id" = $1)
	CheckoutCart(ctx context.Context, dollar_1 sql.NullInt32) error
	//CreateShoppingSession
	//
	//  INSERT INTO shopping_session ("user_id", "total", "created_at", "modified_at")
	//  VALUES ($1, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	//  RETURNING id
	CreateShoppingSession(ctx context.Context, userID sql.NullInt32) (int32, error)
	//DecreaseQuantity
	//
	//  UPDATE cart_item
	//  SET quantity  = quantity - 1
	//  WHERE session_id = $1 AND product_id = $2 AND quantity > 1
	DecreaseQuantity(ctx context.Context, arg DecreaseQuantityParams) error
	//GetActiveSession
	//
	//  SELECT id, user_id, total, created_at, modified_at
	//  FROM shopping_session
	//  WHERE user_id = $1
	//  ORDER BY created_at DESC
	//  LIMIT 1
	GetActiveSession(ctx context.Context, userID sql.NullInt32) (ShoppingSession, error)
	//IncreaseQuantity
	//
	//  UPDATE cart_item
	//  SET quantity = quantity + 1
	//  WHERE session_id = $1 AND product_id = $2
	IncreaseQuantity(ctx context.Context, arg IncreaseQuantityParams) error
	//RemoveCartItem
	//
	//  WITH delete_item AS (
	//      DELETE FROM cart_item
	//      WHERE session_id = $1 AND product_id = $2
	//      RETURNING "session_id"
	//  ),
	//  updated_session AS (
	//      UPDATE shopping_session
	//      SET total = (
	//          SELECT COALESCE(SUM(quantity), 0)
	//          FROM cart_item
	//          WHERE session_id = $1
	//      )
	//      WHERE id = $1
	//      RETURNING id, total
	//  )
	//  UPDATE shopping_session
	//  SET total = 0
	//  WHERE id = $1 AND NOT EXISTS (
	//      SELECT 1 FROM cart_item WHERE session_id = $1
	//  )
	RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) (int64, error)
	//UpdateCartItemQuantity
	//
	//  UPDATE cart_item
	//  SET quantity = $3, modified_at = CURRENT_TIMESTAMP
	//  WHERE session_id = $1 AND product_id = $2
	//  RETURNING "id"
	UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error
	//ViewCurrentCartItem
	//
	//  SELECT id, name, description, sku, category, price, discount_id, created_at, modified_at FROM product
	//  WHERE id IN (
	//      SELECT product_id
	//      FROM  cart_item
	//      WHERE session_id = $1
	//  )
	ViewCurrentCartItem(ctx context.Context, sessionID sql.NullInt32) ([]Product, error)
}

var _ Querier = (*Queries)(nil)
